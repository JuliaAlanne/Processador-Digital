// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/20/2023 13:56:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    altProcessor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module altProcessor_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module altProcessor_vlg_check_tst (
	ex_RF_W_addr,
	exampleOut,
	I_addr,
	I_data,
	I_rd,
	sampler_rx
);
input [3:0] ex_RF_W_addr;
input [15:0] exampleOut;
input [15:0] I_addr;
input [15:0] I_data;
input  I_rd;
input sampler_rx;

reg [3:0] ex_RF_W_addr_expected;
reg [15:0] exampleOut_expected;
reg [15:0] I_addr_expected;
reg [15:0] I_data_expected;
reg  I_rd_expected;

reg [3:0] ex_RF_W_addr_prev;
reg [15:0] exampleOut_prev;
reg [15:0] I_addr_prev;
reg [15:0] I_data_prev;
reg  I_rd_prev;

reg [3:0] ex_RF_W_addr_expected_prev;
reg [15:0] exampleOut_expected_prev;
reg [15:0] I_addr_expected_prev;
reg [15:0] I_data_expected_prev;
reg  I_rd_expected_prev;

reg [3:0] last_ex_RF_W_addr_exp;
reg [15:0] last_exampleOut_exp;
reg [15:0] last_I_addr_exp;
reg [15:0] last_I_data_exp;
reg  last_I_rd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	ex_RF_W_addr_prev = ex_RF_W_addr;
	exampleOut_prev = exampleOut;
	I_addr_prev = I_addr;
	I_data_prev = I_data;
	I_rd_prev = I_rd;
end

// update expected /o prevs

always @(trigger)
begin
	ex_RF_W_addr_expected_prev = ex_RF_W_addr_expected;
	exampleOut_expected_prev = exampleOut_expected;
	I_addr_expected_prev = I_addr_expected;
	I_data_expected_prev = I_data_expected;
	I_rd_expected_prev = I_rd_expected;
end


// expected ex_RF_W_addr[ 3 ]
initial
begin
	ex_RF_W_addr_expected[3] = 1'bX;
end 
// expected ex_RF_W_addr[ 2 ]
initial
begin
	ex_RF_W_addr_expected[2] = 1'bX;
end 
// expected ex_RF_W_addr[ 1 ]
initial
begin
	ex_RF_W_addr_expected[1] = 1'bX;
end 
// expected ex_RF_W_addr[ 0 ]
initial
begin
	ex_RF_W_addr_expected[0] = 1'bX;
end 
// expected exampleOut[ 15 ]
initial
begin
	exampleOut_expected[15] = 1'bX;
end 
// expected exampleOut[ 14 ]
initial
begin
	exampleOut_expected[14] = 1'bX;
end 
// expected exampleOut[ 13 ]
initial
begin
	exampleOut_expected[13] = 1'bX;
end 
// expected exampleOut[ 12 ]
initial
begin
	exampleOut_expected[12] = 1'bX;
end 
// expected exampleOut[ 11 ]
initial
begin
	exampleOut_expected[11] = 1'bX;
end 
// expected exampleOut[ 10 ]
initial
begin
	exampleOut_expected[10] = 1'bX;
end 
// expected exampleOut[ 9 ]
initial
begin
	exampleOut_expected[9] = 1'bX;
end 
// expected exampleOut[ 8 ]
initial
begin
	exampleOut_expected[8] = 1'bX;
end 
// expected exampleOut[ 7 ]
initial
begin
	exampleOut_expected[7] = 1'bX;
end 
// expected exampleOut[ 6 ]
initial
begin
	exampleOut_expected[6] = 1'bX;
end 
// expected exampleOut[ 5 ]
initial
begin
	exampleOut_expected[5] = 1'bX;
end 
// expected exampleOut[ 4 ]
initial
begin
	exampleOut_expected[4] = 1'bX;
end 
// expected exampleOut[ 3 ]
initial
begin
	exampleOut_expected[3] = 1'bX;
end 
// expected exampleOut[ 2 ]
initial
begin
	exampleOut_expected[2] = 1'bX;
end 
// expected exampleOut[ 1 ]
initial
begin
	exampleOut_expected[1] = 1'bX;
end 
// expected exampleOut[ 0 ]
initial
begin
	exampleOut_expected[0] = 1'bX;
end 
// expected I_addr[ 15 ]
initial
begin
	I_addr_expected[15] = 1'bX;
end 
// expected I_addr[ 14 ]
initial
begin
	I_addr_expected[14] = 1'bX;
end 
// expected I_addr[ 13 ]
initial
begin
	I_addr_expected[13] = 1'bX;
end 
// expected I_addr[ 12 ]
initial
begin
	I_addr_expected[12] = 1'bX;
end 
// expected I_addr[ 11 ]
initial
begin
	I_addr_expected[11] = 1'bX;
end 
// expected I_addr[ 10 ]
initial
begin
	I_addr_expected[10] = 1'bX;
end 
// expected I_addr[ 9 ]
initial
begin
	I_addr_expected[9] = 1'bX;
end 
// expected I_addr[ 8 ]
initial
begin
	I_addr_expected[8] = 1'bX;
end 
// expected I_addr[ 7 ]
initial
begin
	I_addr_expected[7] = 1'bX;
end 
// expected I_addr[ 6 ]
initial
begin
	I_addr_expected[6] = 1'bX;
end 
// expected I_addr[ 5 ]
initial
begin
	I_addr_expected[5] = 1'bX;
end 
// expected I_addr[ 4 ]
initial
begin
	I_addr_expected[4] = 1'bX;
end 
// expected I_addr[ 3 ]
initial
begin
	I_addr_expected[3] = 1'bX;
end 
// expected I_addr[ 2 ]
initial
begin
	I_addr_expected[2] = 1'bX;
end 
// expected I_addr[ 1 ]
initial
begin
	I_addr_expected[1] = 1'bX;
end 
// expected I_addr[ 0 ]
initial
begin
	I_addr_expected[0] = 1'bX;
end 
// expected I_data[ 15 ]
initial
begin
	I_data_expected[15] = 1'bX;
end 
// expected I_data[ 14 ]
initial
begin
	I_data_expected[14] = 1'bX;
end 
// expected I_data[ 13 ]
initial
begin
	I_data_expected[13] = 1'bX;
end 
// expected I_data[ 12 ]
initial
begin
	I_data_expected[12] = 1'bX;
end 
// expected I_data[ 11 ]
initial
begin
	I_data_expected[11] = 1'bX;
end 
// expected I_data[ 10 ]
initial
begin
	I_data_expected[10] = 1'bX;
end 
// expected I_data[ 9 ]
initial
begin
	I_data_expected[9] = 1'bX;
end 
// expected I_data[ 8 ]
initial
begin
	I_data_expected[8] = 1'bX;
end 
// expected I_data[ 7 ]
initial
begin
	I_data_expected[7] = 1'bX;
end 
// expected I_data[ 6 ]
initial
begin
	I_data_expected[6] = 1'bX;
end 
// expected I_data[ 5 ]
initial
begin
	I_data_expected[5] = 1'bX;
end 
// expected I_data[ 4 ]
initial
begin
	I_data_expected[4] = 1'bX;
end 
// expected I_data[ 3 ]
initial
begin
	I_data_expected[3] = 1'bX;
end 
// expected I_data[ 2 ]
initial
begin
	I_data_expected[2] = 1'bX;
end 
// expected I_data[ 1 ]
initial
begin
	I_data_expected[1] = 1'bX;
end 
// expected I_data[ 0 ]
initial
begin
	I_data_expected[0] = 1'bX;
end 

// expected I_rd
initial
begin
	I_rd_expected = 1'bX;
end 
// generate trigger
always @(ex_RF_W_addr_expected or ex_RF_W_addr or exampleOut_expected or exampleOut or I_addr_expected or I_addr or I_data_expected or I_data or I_rd_expected or I_rd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ex_RF_W_addr = %b | expected exampleOut = %b | expected I_addr = %b | expected I_data = %b | expected I_rd = %b | ",ex_RF_W_addr_expected_prev,exampleOut_expected_prev,I_addr_expected_prev,I_data_expected_prev,I_rd_expected_prev);
	$display("| real ex_RF_W_addr = %b | real exampleOut = %b | real I_addr = %b | real I_data = %b | real I_rd = %b | ",ex_RF_W_addr_prev,exampleOut_prev,I_addr_prev,I_data_prev,I_rd_prev);
`endif
	if (
		( ex_RF_W_addr_expected_prev[0] !== 1'bx ) && ( ex_RF_W_addr_prev[0] !== ex_RF_W_addr_expected_prev[0] )
		&& ((ex_RF_W_addr_expected_prev[0] !== last_ex_RF_W_addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ex_RF_W_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ex_RF_W_addr_expected_prev);
		$display ("     Real value = %b", ex_RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ex_RF_W_addr_exp[0] = ex_RF_W_addr_expected_prev[0];
	end
	if (
		( ex_RF_W_addr_expected_prev[1] !== 1'bx ) && ( ex_RF_W_addr_prev[1] !== ex_RF_W_addr_expected_prev[1] )
		&& ((ex_RF_W_addr_expected_prev[1] !== last_ex_RF_W_addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ex_RF_W_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ex_RF_W_addr_expected_prev);
		$display ("     Real value = %b", ex_RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ex_RF_W_addr_exp[1] = ex_RF_W_addr_expected_prev[1];
	end
	if (
		( ex_RF_W_addr_expected_prev[2] !== 1'bx ) && ( ex_RF_W_addr_prev[2] !== ex_RF_W_addr_expected_prev[2] )
		&& ((ex_RF_W_addr_expected_prev[2] !== last_ex_RF_W_addr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ex_RF_W_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ex_RF_W_addr_expected_prev);
		$display ("     Real value = %b", ex_RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ex_RF_W_addr_exp[2] = ex_RF_W_addr_expected_prev[2];
	end
	if (
		( ex_RF_W_addr_expected_prev[3] !== 1'bx ) && ( ex_RF_W_addr_prev[3] !== ex_RF_W_addr_expected_prev[3] )
		&& ((ex_RF_W_addr_expected_prev[3] !== last_ex_RF_W_addr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ex_RF_W_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ex_RF_W_addr_expected_prev);
		$display ("     Real value = %b", ex_RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ex_RF_W_addr_exp[3] = ex_RF_W_addr_expected_prev[3];
	end
	if (
		( exampleOut_expected_prev[0] !== 1'bx ) && ( exampleOut_prev[0] !== exampleOut_expected_prev[0] )
		&& ((exampleOut_expected_prev[0] !== last_exampleOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[0] = exampleOut_expected_prev[0];
	end
	if (
		( exampleOut_expected_prev[1] !== 1'bx ) && ( exampleOut_prev[1] !== exampleOut_expected_prev[1] )
		&& ((exampleOut_expected_prev[1] !== last_exampleOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[1] = exampleOut_expected_prev[1];
	end
	if (
		( exampleOut_expected_prev[2] !== 1'bx ) && ( exampleOut_prev[2] !== exampleOut_expected_prev[2] )
		&& ((exampleOut_expected_prev[2] !== last_exampleOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[2] = exampleOut_expected_prev[2];
	end
	if (
		( exampleOut_expected_prev[3] !== 1'bx ) && ( exampleOut_prev[3] !== exampleOut_expected_prev[3] )
		&& ((exampleOut_expected_prev[3] !== last_exampleOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[3] = exampleOut_expected_prev[3];
	end
	if (
		( exampleOut_expected_prev[4] !== 1'bx ) && ( exampleOut_prev[4] !== exampleOut_expected_prev[4] )
		&& ((exampleOut_expected_prev[4] !== last_exampleOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[4] = exampleOut_expected_prev[4];
	end
	if (
		( exampleOut_expected_prev[5] !== 1'bx ) && ( exampleOut_prev[5] !== exampleOut_expected_prev[5] )
		&& ((exampleOut_expected_prev[5] !== last_exampleOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[5] = exampleOut_expected_prev[5];
	end
	if (
		( exampleOut_expected_prev[6] !== 1'bx ) && ( exampleOut_prev[6] !== exampleOut_expected_prev[6] )
		&& ((exampleOut_expected_prev[6] !== last_exampleOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[6] = exampleOut_expected_prev[6];
	end
	if (
		( exampleOut_expected_prev[7] !== 1'bx ) && ( exampleOut_prev[7] !== exampleOut_expected_prev[7] )
		&& ((exampleOut_expected_prev[7] !== last_exampleOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[7] = exampleOut_expected_prev[7];
	end
	if (
		( exampleOut_expected_prev[8] !== 1'bx ) && ( exampleOut_prev[8] !== exampleOut_expected_prev[8] )
		&& ((exampleOut_expected_prev[8] !== last_exampleOut_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[8] = exampleOut_expected_prev[8];
	end
	if (
		( exampleOut_expected_prev[9] !== 1'bx ) && ( exampleOut_prev[9] !== exampleOut_expected_prev[9] )
		&& ((exampleOut_expected_prev[9] !== last_exampleOut_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[9] = exampleOut_expected_prev[9];
	end
	if (
		( exampleOut_expected_prev[10] !== 1'bx ) && ( exampleOut_prev[10] !== exampleOut_expected_prev[10] )
		&& ((exampleOut_expected_prev[10] !== last_exampleOut_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[10] = exampleOut_expected_prev[10];
	end
	if (
		( exampleOut_expected_prev[11] !== 1'bx ) && ( exampleOut_prev[11] !== exampleOut_expected_prev[11] )
		&& ((exampleOut_expected_prev[11] !== last_exampleOut_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[11] = exampleOut_expected_prev[11];
	end
	if (
		( exampleOut_expected_prev[12] !== 1'bx ) && ( exampleOut_prev[12] !== exampleOut_expected_prev[12] )
		&& ((exampleOut_expected_prev[12] !== last_exampleOut_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[12] = exampleOut_expected_prev[12];
	end
	if (
		( exampleOut_expected_prev[13] !== 1'bx ) && ( exampleOut_prev[13] !== exampleOut_expected_prev[13] )
		&& ((exampleOut_expected_prev[13] !== last_exampleOut_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[13] = exampleOut_expected_prev[13];
	end
	if (
		( exampleOut_expected_prev[14] !== 1'bx ) && ( exampleOut_prev[14] !== exampleOut_expected_prev[14] )
		&& ((exampleOut_expected_prev[14] !== last_exampleOut_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[14] = exampleOut_expected_prev[14];
	end
	if (
		( exampleOut_expected_prev[15] !== 1'bx ) && ( exampleOut_prev[15] !== exampleOut_expected_prev[15] )
		&& ((exampleOut_expected_prev[15] !== last_exampleOut_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port exampleOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", exampleOut_expected_prev);
		$display ("     Real value = %b", exampleOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_exampleOut_exp[15] = exampleOut_expected_prev[15];
	end
	if (
		( I_addr_expected_prev[0] !== 1'bx ) && ( I_addr_prev[0] !== I_addr_expected_prev[0] )
		&& ((I_addr_expected_prev[0] !== last_I_addr_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[0] = I_addr_expected_prev[0];
	end
	if (
		( I_addr_expected_prev[1] !== 1'bx ) && ( I_addr_prev[1] !== I_addr_expected_prev[1] )
		&& ((I_addr_expected_prev[1] !== last_I_addr_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[1] = I_addr_expected_prev[1];
	end
	if (
		( I_addr_expected_prev[2] !== 1'bx ) && ( I_addr_prev[2] !== I_addr_expected_prev[2] )
		&& ((I_addr_expected_prev[2] !== last_I_addr_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[2] = I_addr_expected_prev[2];
	end
	if (
		( I_addr_expected_prev[3] !== 1'bx ) && ( I_addr_prev[3] !== I_addr_expected_prev[3] )
		&& ((I_addr_expected_prev[3] !== last_I_addr_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[3] = I_addr_expected_prev[3];
	end
	if (
		( I_addr_expected_prev[4] !== 1'bx ) && ( I_addr_prev[4] !== I_addr_expected_prev[4] )
		&& ((I_addr_expected_prev[4] !== last_I_addr_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[4] = I_addr_expected_prev[4];
	end
	if (
		( I_addr_expected_prev[5] !== 1'bx ) && ( I_addr_prev[5] !== I_addr_expected_prev[5] )
		&& ((I_addr_expected_prev[5] !== last_I_addr_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[5] = I_addr_expected_prev[5];
	end
	if (
		( I_addr_expected_prev[6] !== 1'bx ) && ( I_addr_prev[6] !== I_addr_expected_prev[6] )
		&& ((I_addr_expected_prev[6] !== last_I_addr_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[6] = I_addr_expected_prev[6];
	end
	if (
		( I_addr_expected_prev[7] !== 1'bx ) && ( I_addr_prev[7] !== I_addr_expected_prev[7] )
		&& ((I_addr_expected_prev[7] !== last_I_addr_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[7] = I_addr_expected_prev[7];
	end
	if (
		( I_addr_expected_prev[8] !== 1'bx ) && ( I_addr_prev[8] !== I_addr_expected_prev[8] )
		&& ((I_addr_expected_prev[8] !== last_I_addr_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[8] = I_addr_expected_prev[8];
	end
	if (
		( I_addr_expected_prev[9] !== 1'bx ) && ( I_addr_prev[9] !== I_addr_expected_prev[9] )
		&& ((I_addr_expected_prev[9] !== last_I_addr_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[9] = I_addr_expected_prev[9];
	end
	if (
		( I_addr_expected_prev[10] !== 1'bx ) && ( I_addr_prev[10] !== I_addr_expected_prev[10] )
		&& ((I_addr_expected_prev[10] !== last_I_addr_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[10] = I_addr_expected_prev[10];
	end
	if (
		( I_addr_expected_prev[11] !== 1'bx ) && ( I_addr_prev[11] !== I_addr_expected_prev[11] )
		&& ((I_addr_expected_prev[11] !== last_I_addr_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[11] = I_addr_expected_prev[11];
	end
	if (
		( I_addr_expected_prev[12] !== 1'bx ) && ( I_addr_prev[12] !== I_addr_expected_prev[12] )
		&& ((I_addr_expected_prev[12] !== last_I_addr_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[12] = I_addr_expected_prev[12];
	end
	if (
		( I_addr_expected_prev[13] !== 1'bx ) && ( I_addr_prev[13] !== I_addr_expected_prev[13] )
		&& ((I_addr_expected_prev[13] !== last_I_addr_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[13] = I_addr_expected_prev[13];
	end
	if (
		( I_addr_expected_prev[14] !== 1'bx ) && ( I_addr_prev[14] !== I_addr_expected_prev[14] )
		&& ((I_addr_expected_prev[14] !== last_I_addr_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[14] = I_addr_expected_prev[14];
	end
	if (
		( I_addr_expected_prev[15] !== 1'bx ) && ( I_addr_prev[15] !== I_addr_expected_prev[15] )
		&& ((I_addr_expected_prev[15] !== last_I_addr_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_I_addr_exp[15] = I_addr_expected_prev[15];
	end
	if (
		( I_data_expected_prev[0] !== 1'bx ) && ( I_data_prev[0] !== I_data_expected_prev[0] )
		&& ((I_data_expected_prev[0] !== last_I_data_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[0] = I_data_expected_prev[0];
	end
	if (
		( I_data_expected_prev[1] !== 1'bx ) && ( I_data_prev[1] !== I_data_expected_prev[1] )
		&& ((I_data_expected_prev[1] !== last_I_data_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[1] = I_data_expected_prev[1];
	end
	if (
		( I_data_expected_prev[2] !== 1'bx ) && ( I_data_prev[2] !== I_data_expected_prev[2] )
		&& ((I_data_expected_prev[2] !== last_I_data_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[2] = I_data_expected_prev[2];
	end
	if (
		( I_data_expected_prev[3] !== 1'bx ) && ( I_data_prev[3] !== I_data_expected_prev[3] )
		&& ((I_data_expected_prev[3] !== last_I_data_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[3] = I_data_expected_prev[3];
	end
	if (
		( I_data_expected_prev[4] !== 1'bx ) && ( I_data_prev[4] !== I_data_expected_prev[4] )
		&& ((I_data_expected_prev[4] !== last_I_data_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[4] = I_data_expected_prev[4];
	end
	if (
		( I_data_expected_prev[5] !== 1'bx ) && ( I_data_prev[5] !== I_data_expected_prev[5] )
		&& ((I_data_expected_prev[5] !== last_I_data_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[5] = I_data_expected_prev[5];
	end
	if (
		( I_data_expected_prev[6] !== 1'bx ) && ( I_data_prev[6] !== I_data_expected_prev[6] )
		&& ((I_data_expected_prev[6] !== last_I_data_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[6] = I_data_expected_prev[6];
	end
	if (
		( I_data_expected_prev[7] !== 1'bx ) && ( I_data_prev[7] !== I_data_expected_prev[7] )
		&& ((I_data_expected_prev[7] !== last_I_data_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[7] = I_data_expected_prev[7];
	end
	if (
		( I_data_expected_prev[8] !== 1'bx ) && ( I_data_prev[8] !== I_data_expected_prev[8] )
		&& ((I_data_expected_prev[8] !== last_I_data_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[8] = I_data_expected_prev[8];
	end
	if (
		( I_data_expected_prev[9] !== 1'bx ) && ( I_data_prev[9] !== I_data_expected_prev[9] )
		&& ((I_data_expected_prev[9] !== last_I_data_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[9] = I_data_expected_prev[9];
	end
	if (
		( I_data_expected_prev[10] !== 1'bx ) && ( I_data_prev[10] !== I_data_expected_prev[10] )
		&& ((I_data_expected_prev[10] !== last_I_data_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[10] = I_data_expected_prev[10];
	end
	if (
		( I_data_expected_prev[11] !== 1'bx ) && ( I_data_prev[11] !== I_data_expected_prev[11] )
		&& ((I_data_expected_prev[11] !== last_I_data_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[11] = I_data_expected_prev[11];
	end
	if (
		( I_data_expected_prev[12] !== 1'bx ) && ( I_data_prev[12] !== I_data_expected_prev[12] )
		&& ((I_data_expected_prev[12] !== last_I_data_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[12] = I_data_expected_prev[12];
	end
	if (
		( I_data_expected_prev[13] !== 1'bx ) && ( I_data_prev[13] !== I_data_expected_prev[13] )
		&& ((I_data_expected_prev[13] !== last_I_data_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[13] = I_data_expected_prev[13];
	end
	if (
		( I_data_expected_prev[14] !== 1'bx ) && ( I_data_prev[14] !== I_data_expected_prev[14] )
		&& ((I_data_expected_prev[14] !== last_I_data_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[14] = I_data_expected_prev[14];
	end
	if (
		( I_data_expected_prev[15] !== 1'bx ) && ( I_data_prev[15] !== I_data_expected_prev[15] )
		&& ((I_data_expected_prev[15] !== last_I_data_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_data_expected_prev);
		$display ("     Real value = %b", I_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_I_data_exp[15] = I_data_expected_prev[15];
	end
	if (
		( I_rd_expected_prev !== 1'bx ) && ( I_rd_prev !== I_rd_expected_prev )
		&& ((I_rd_expected_prev !== last_I_rd_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_expected_prev);
		$display ("     Real value = %b", I_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_I_rd_exp = I_rd_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module altProcessor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [3:0] ex_RF_W_addr;
wire [15:0] exampleOut;
wire [15:0] I_addr;
wire [15:0] I_data;
wire I_rd;

wire sampler;                             

// assign statements (if any)                          
altProcessor i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.ex_RF_W_addr(ex_RF_W_addr),
	.exampleOut(exampleOut),
	.I_addr(I_addr),
	.I_data(I_data),
	.I_rd(I_rd),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #870000 1'b1;
	reset = #10000 1'b0;
end 

altProcessor_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

altProcessor_vlg_check_tst tb_out(
	.ex_RF_W_addr(ex_RF_W_addr),
	.exampleOut(exampleOut),
	.I_addr(I_addr),
	.I_data(I_data),
	.I_rd(I_rd),
	.sampler_rx(sampler)
);
endmodule

